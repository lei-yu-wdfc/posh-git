#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wonga.QA.Framework.Db.CallReport
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CallReport")]
	public partial class CallReportDatabase : DbDatabase<CallReportDatabase>
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCallReportActiveRequestEntity(CallReportActiveRequestEntity instance);
    partial void UpdateCallReportActiveRequestEntity(CallReportActiveRequestEntity instance);
    partial void DeleteCallReportActiveRequestEntity(CallReportActiveRequestEntity instance);
    partial void InsertFactorEntity(FactorEntity instance);
    partial void UpdateFactorEntity(FactorEntity instance);
    partial void DeleteFactorEntity(FactorEntity instance);
    partial void InsertMSSQLDeploy(MSSQLDeploy instance);
    partial void UpdateMSSQLDeploy(MSSQLDeploy instance);
    partial void DeleteMSSQLDeploy(MSSQLDeploy instance);
    partial void InsertParsedFactorEntity(ParsedFactorEntity instance);
    partial void UpdateParsedFactorEntity(ParsedFactorEntity instance);
    partial void DeleteParsedFactorEntity(ParsedFactorEntity instance);
    partial void InsertParsedFactorsTempEntity(ParsedFactorsTempEntity instance);
    partial void UpdateParsedFactorsTempEntity(ParsedFactorsTempEntity instance);
    partial void DeleteParsedFactorsTempEntity(ParsedFactorsTempEntity instance);
    partial void InsertTypeEntity(TypeEntity instance);
    partial void UpdateTypeEntity(TypeEntity instance);
    partial void DeleteTypeEntity(TypeEntity instance);
    #endregion
		
		public CallReportDatabase(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CallReportDatabase(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CallReportDatabase(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CallReportDatabase(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AgreementRefEntity> AgreementRefs
		{
			get
			{
				return this.GetTable<AgreementRefEntity>();
			}
		}
		
		public System.Data.Linq.Table<CallReportActiveRequestEntity> CallReportActiveRequests
		{
			get
			{
				return this.GetTable<CallReportActiveRequestEntity>();
			}
		}
		
		public System.Data.Linq.Table<FactorEntity> Factors
		{
			get
			{
				return this.GetTable<FactorEntity>();
			}
		}
		
		public System.Data.Linq.Table<MSSQLDeploy> MSSQLDeploys
		{
			get
			{
				return this.GetTable<MSSQLDeploy>();
			}
		}
		
		public System.Data.Linq.Table<ParsedFactorEntity> ParsedFactors
		{
			get
			{
				return this.GetTable<ParsedFactorEntity>();
			}
		}
		
		public System.Data.Linq.Table<ParsedFactorsTempEntity> ParsedFactorsTemps
		{
			get
			{
				return this.GetTable<ParsedFactorsTempEntity>();
			}
		}
		
		public System.Data.Linq.Table<TypeEntity> Types
		{
			get
			{
				return this.GetTable<TypeEntity>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="callreport.AgreementRef")]
	public partial class AgreementRefEntity : DbEntity<AgreementRefEntity>
	{
		
		private int _AgreementRefId;
		
		private System.Guid _AccountId;
		
		private string _AgreementReference;
		
		public AgreementRefEntity()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgreementRefId", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int AgreementRefId
		{
			get
			{
				return this._AgreementRefId;
			}
			set
			{
				if ((this._AgreementRefId != value))
				{
					this._AgreementRefId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					this._AccountId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgreementReference", DbType="VarChar(12) NOT NULL", CanBeNull=false)]
		public string AgreementReference
		{
			get
			{
				return this._AgreementReference;
			}
			set
			{
				if ((this._AgreementReference != value))
				{
					this._AgreementReference = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="cache.CallReportActiveRequest")]
	public partial class CallReportActiveRequestEntity : DbEntity<CallReportActiveRequestEntity>, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ActiveRequestId;
		
		private long _RequestHash;
		
		private string _RequestData;
		
		private string _ResponseData;
		
		private System.DateTime _RequestDate;
		
		private System.Nullable<int> _TotalMilliseconds;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActiveRequestIdChanging(int value);
    partial void OnActiveRequestIdChanged();
    partial void OnRequestHashChanging(long value);
    partial void OnRequestHashChanged();
    partial void OnRequestDataChanging(string value);
    partial void OnRequestDataChanged();
    partial void OnResponseDataChanging(string value);
    partial void OnResponseDataChanged();
    partial void OnRequestDateChanging(System.DateTime value);
    partial void OnRequestDateChanged();
    partial void OnTotalMillisecondsChanging(System.Nullable<int> value);
    partial void OnTotalMillisecondsChanged();
    #endregion
		
		public CallReportActiveRequestEntity()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveRequestId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ActiveRequestId
		{
			get
			{
				return this._ActiveRequestId;
			}
			set
			{
				if ((this._ActiveRequestId != value))
				{
					this.OnActiveRequestIdChanging(value);
					this.SendPropertyChanging();
					this._ActiveRequestId = value;
					this.SendPropertyChanged("ActiveRequestId");
					this.OnActiveRequestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestHash", DbType="BigInt NOT NULL")]
		public long RequestHash
		{
			get
			{
				return this._RequestHash;
			}
			set
			{
				if ((this._RequestHash != value))
				{
					this.OnRequestHashChanging(value);
					this.SendPropertyChanging();
					this._RequestHash = value;
					this.SendPropertyChanged("RequestHash");
					this.OnRequestHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestData", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string RequestData
		{
			get
			{
				return this._RequestData;
			}
			set
			{
				if ((this._RequestData != value))
				{
					this.OnRequestDataChanging(value);
					this.SendPropertyChanging();
					this._RequestData = value;
					this.SendPropertyChanged("RequestData");
					this.OnRequestDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResponseData", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ResponseData
		{
			get
			{
				return this._ResponseData;
			}
			set
			{
				if ((this._ResponseData != value))
				{
					this.OnResponseDataChanging(value);
					this.SendPropertyChanging();
					this._ResponseData = value;
					this.SendPropertyChanged("ResponseData");
					this.OnResponseDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestDate", DbType="DateTime NOT NULL")]
		public System.DateTime RequestDate
		{
			get
			{
				return this._RequestDate;
			}
			set
			{
				if ((this._RequestDate != value))
				{
					this.OnRequestDateChanging(value);
					this.SendPropertyChanging();
					this._RequestDate = value;
					this.SendPropertyChanged("RequestDate");
					this.OnRequestDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalMilliseconds", DbType="Int")]
		public System.Nullable<int> TotalMilliseconds
		{
			get
			{
				return this._TotalMilliseconds;
			}
			set
			{
				if ((this._TotalMilliseconds != value))
				{
					this.OnTotalMillisecondsChanging(value);
					this.SendPropertyChanging();
					this._TotalMilliseconds = value;
					this.SendPropertyChanged("TotalMilliseconds");
					this.OnTotalMillisecondsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="callreport.Factors")]
	public partial class FactorEntity : DbEntity<FactorEntity>, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FactorId;
		
		private string _Name;
		
		private int _DataTypeId;
		
		private EntityRef<TypeEntity> _TypeEntity;
		
		private EntitySet<ParsedFactorEntity> _ParsedFactors;
		
		private EntitySet<ParsedFactorsTempEntity> _ParsedFactorsTemps;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFactorIdChanging(int value);
    partial void OnFactorIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDataTypeIdChanging(int value);
    partial void OnDataTypeIdChanged();
    #endregion
		
		public FactorEntity()
		{
			this._TypeEntity = default(EntityRef<TypeEntity>);
			this._ParsedFactors = new EntitySet<ParsedFactorEntity>(new Action<ParsedFactorEntity>(this.attach_ParsedFactors), new Action<ParsedFactorEntity>(this.detach_ParsedFactors));
			this._ParsedFactorsTemps = new EntitySet<ParsedFactorsTempEntity>(new Action<ParsedFactorsTempEntity>(this.attach_ParsedFactorsTemps), new Action<ParsedFactorsTempEntity>(this.detach_ParsedFactorsTemps));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FactorId
		{
			get
			{
				return this._FactorId;
			}
			set
			{
				if ((this._FactorId != value))
				{
					this.OnFactorIdChanging(value);
					this.SendPropertyChanging();
					this._FactorId = value;
					this.SendPropertyChanged("FactorId");
					this.OnFactorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataTypeId", DbType="Int NOT NULL")]
		public int DataTypeId
		{
			get
			{
				return this._DataTypeId;
			}
			set
			{
				if ((this._DataTypeId != value))
				{
					if (this._TypeEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataTypeIdChanging(value);
					this.SendPropertyChanging();
					this._DataTypeId = value;
					this.SendPropertyChanged("DataTypeId");
					this.OnDataTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Callreport_Factors_TypeId", Storage="_TypeEntity", ThisKey="DataTypeId", OtherKey="Id", IsForeignKey=true)]
		public TypeEntity TypeEntity
		{
			get
			{
				return this._TypeEntity.Entity;
			}
			set
			{
				TypeEntity previousValue = this._TypeEntity.Entity;
				if (((previousValue != value) 
							|| (this._TypeEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeEntity.Entity = null;
						previousValue.Factors.Remove(this);
					}
					this._TypeEntity.Entity = value;
					if ((value != null))
					{
						value.Factors.Add(this);
						this._DataTypeId = value.Id;
					}
					else
					{
						this._DataTypeId = default(int);
					}
					this.SendPropertyChanged("TypeEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Callreport_ParsedFactors_FactorId", Storage="_ParsedFactors", ThisKey="FactorId", OtherKey="FactorId", DeleteRule="NO ACTION")]
		public EntitySet<ParsedFactorEntity> ParsedFactors
		{
			get
			{
				return this._ParsedFactors;
			}
			set
			{
				this._ParsedFactors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Callreport_TempParsedFactors_FactorId", Storage="_ParsedFactorsTemps", ThisKey="FactorId", OtherKey="FactorId", DeleteRule="NO ACTION")]
		public EntitySet<ParsedFactorsTempEntity> ParsedFactorsTemps
		{
			get
			{
				return this._ParsedFactorsTemps;
			}
			set
			{
				this._ParsedFactorsTemps.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ParsedFactors(ParsedFactorEntity entity)
		{
			this.SendPropertyChanging();
			entity.FactorEntity = this;
		}
		
		private void detach_ParsedFactors(ParsedFactorEntity entity)
		{
			this.SendPropertyChanging();
			entity.FactorEntity = null;
		}
		
		private void attach_ParsedFactorsTemps(ParsedFactorsTempEntity entity)
		{
			this.SendPropertyChanging();
			entity.FactorEntity = this;
		}
		
		private void detach_ParsedFactorsTemps(ParsedFactorsTempEntity entity)
		{
			this.SendPropertyChanging();
			entity.FactorEntity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MSSQLDeploy")]
	public partial class MSSQLDeploy : DbEntity<MSSQLDeploy>, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _Date;
		
		private string _Name;
		
		private string _MD5;
		
		private System.Nullable<int> _Revision;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMD5Changing(string value);
    partial void OnMD5Changed();
    partial void OnRevisionChanging(System.Nullable<int> value);
    partial void OnRevisionChanged();
    #endregion
		
		public MSSQLDeploy()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MD5", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string MD5
		{
			get
			{
				return this._MD5;
			}
			set
			{
				if ((this._MD5 != value))
				{
					this.OnMD5Changing(value);
					this.SendPropertyChanging();
					this._MD5 = value;
					this.SendPropertyChanged("MD5");
					this.OnMD5Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Revision", DbType="Int")]
		public System.Nullable<int> Revision
		{
			get
			{
				return this._Revision;
			}
			set
			{
				if ((this._Revision != value))
				{
					this.OnRevisionChanging(value);
					this.SendPropertyChanging();
					this._Revision = value;
					this.SendPropertyChanged("Revision");
					this.OnRevisionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="callreport.ParsedFactors")]
	public partial class ParsedFactorEntity : DbEntity<ParsedFactorEntity>, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ParsedFactorId;
		
		private string _CustomerId;
		
		private int _FactorId;
		
		private string _Value;
		
		private System.Nullable<byte> _NumRecord;
		
		private EntityRef<FactorEntity> _FactorEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnParsedFactorIdChanging(int value);
    partial void OnParsedFactorIdChanged();
    partial void OnCustomerIdChanging(string value);
    partial void OnCustomerIdChanged();
    partial void OnFactorIdChanging(int value);
    partial void OnFactorIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnNumRecordChanging(System.Nullable<byte> value);
    partial void OnNumRecordChanged();
    #endregion
		
		public ParsedFactorEntity()
		{
			this._FactorEntity = default(EntityRef<FactorEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParsedFactorId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ParsedFactorId
		{
			get
			{
				return this._ParsedFactorId;
			}
			set
			{
				if ((this._ParsedFactorId != value))
				{
					this.OnParsedFactorIdChanging(value);
					this.SendPropertyChanging();
					this._ParsedFactorId = value;
					this.SendPropertyChanged("ParsedFactorId");
					this.OnParsedFactorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="VarChar(12) NOT NULL", CanBeNull=false)]
		public string CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorId", DbType="Int NOT NULL")]
		public int FactorId
		{
			get
			{
				return this._FactorId;
			}
			set
			{
				if ((this._FactorId != value))
				{
					if (this._FactorEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactorIdChanging(value);
					this.SendPropertyChanging();
					this._FactorId = value;
					this.SendPropertyChanged("FactorId");
					this.OnFactorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumRecord", DbType="TinyInt")]
		public System.Nullable<byte> NumRecord
		{
			get
			{
				return this._NumRecord;
			}
			set
			{
				if ((this._NumRecord != value))
				{
					this.OnNumRecordChanging(value);
					this.SendPropertyChanging();
					this._NumRecord = value;
					this.SendPropertyChanged("NumRecord");
					this.OnNumRecordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Callreport_ParsedFactors_FactorId", Storage="_FactorEntity", ThisKey="FactorId", OtherKey="FactorId", IsForeignKey=true)]
		public FactorEntity FactorEntity
		{
			get
			{
				return this._FactorEntity.Entity;
			}
			set
			{
				FactorEntity previousValue = this._FactorEntity.Entity;
				if (((previousValue != value) 
							|| (this._FactorEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FactorEntity.Entity = null;
						previousValue.ParsedFactors.Remove(this);
					}
					this._FactorEntity.Entity = value;
					if ((value != null))
					{
						value.ParsedFactors.Add(this);
						this._FactorId = value.FactorId;
					}
					else
					{
						this._FactorId = default(int);
					}
					this.SendPropertyChanged("FactorEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="callreport.ParsedFactorsTemp")]
	public partial class ParsedFactorsTempEntity : DbEntity<ParsedFactorsTempEntity>, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ParsedFactorTempId;
		
		private string _CustomerId;
		
		private int _FactorId;
		
		private string _Value;
		
		private System.Nullable<byte> _NumRecord;
		
		private EntityRef<FactorEntity> _FactorEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnParsedFactorTempIdChanging(int value);
    partial void OnParsedFactorTempIdChanged();
    partial void OnCustomerIdChanging(string value);
    partial void OnCustomerIdChanged();
    partial void OnFactorIdChanging(int value);
    partial void OnFactorIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnNumRecordChanging(System.Nullable<byte> value);
    partial void OnNumRecordChanged();
    #endregion
		
		public ParsedFactorsTempEntity()
		{
			this._FactorEntity = default(EntityRef<FactorEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParsedFactorTempId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ParsedFactorTempId
		{
			get
			{
				return this._ParsedFactorTempId;
			}
			set
			{
				if ((this._ParsedFactorTempId != value))
				{
					this.OnParsedFactorTempIdChanging(value);
					this.SendPropertyChanging();
					this._ParsedFactorTempId = value;
					this.SendPropertyChanged("ParsedFactorTempId");
					this.OnParsedFactorTempIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="VarChar(12) NOT NULL", CanBeNull=false)]
		public string CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorId", DbType="Int NOT NULL")]
		public int FactorId
		{
			get
			{
				return this._FactorId;
			}
			set
			{
				if ((this._FactorId != value))
				{
					if (this._FactorEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactorIdChanging(value);
					this.SendPropertyChanging();
					this._FactorId = value;
					this.SendPropertyChanged("FactorId");
					this.OnFactorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumRecord", DbType="TinyInt")]
		public System.Nullable<byte> NumRecord
		{
			get
			{
				return this._NumRecord;
			}
			set
			{
				if ((this._NumRecord != value))
				{
					this.OnNumRecordChanging(value);
					this.SendPropertyChanging();
					this._NumRecord = value;
					this.SendPropertyChanged("NumRecord");
					this.OnNumRecordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Callreport_TempParsedFactors_FactorId", Storage="_FactorEntity", ThisKey="FactorId", OtherKey="FactorId", IsForeignKey=true)]
		public FactorEntity FactorEntity
		{
			get
			{
				return this._FactorEntity.Entity;
			}
			set
			{
				FactorEntity previousValue = this._FactorEntity.Entity;
				if (((previousValue != value) 
							|| (this._FactorEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FactorEntity.Entity = null;
						previousValue.ParsedFactorsTemps.Remove(this);
					}
					this._FactorEntity.Entity = value;
					if ((value != null))
					{
						value.ParsedFactorsTemps.Add(this);
						this._FactorId = value.FactorId;
					}
					else
					{
						this._FactorId = default(int);
					}
					this.SendPropertyChanged("FactorEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="callreport.Types")]
	public partial class TypeEntity : DbEntity<TypeEntity>, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<FactorEntity> _Factors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public TypeEntity()
		{
			this._Factors = new EntitySet<FactorEntity>(new Action<FactorEntity>(this.attach_Factors), new Action<FactorEntity>(this.detach_Factors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Callreport_Factors_TypeId", Storage="_Factors", ThisKey="Id", OtherKey="DataTypeId", DeleteRule="NO ACTION")]
		public EntitySet<FactorEntity> Factors
		{
			get
			{
				return this._Factors;
			}
			set
			{
				this._Factors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Factors(FactorEntity entity)
		{
			this.SendPropertyChanging();
			entity.TypeEntity = this;
		}
		
		private void detach_Factors(FactorEntity entity)
		{
			this.SendPropertyChanging();
			entity.TypeEntity = null;
		}
	}
}
#pragma warning restore 1591
